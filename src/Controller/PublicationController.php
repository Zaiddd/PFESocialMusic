<?php


namespace App\Controller;


use App\Entity\CommentPublication;
use App\Entity\Publication;
use App\Entity\Signal;
use App\Entity\User;
use App\Form\PublicationForm;
use App\Form\UserRegisterForm;
use App\Repository\UserRepository;
use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\DBAL\Types\TextType;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Persistence\ManagerRegistry;
use http\Url;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormError;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Security\Core\User\UserInterface;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Component\Validator\Constraints\DateTime;
use Twig\Environment;
use PHPMailer\PHPMailer\PHPMailer;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\String\Slugger\AsciiSlugger;


class PublicationController extends AbstractController
{

    /**
     * @Route("/user/publier", name="User.publier", methods={"GET","POST"})
     */
    public function new(Request $request, UserPasswordEncoderInterface $encoder, EntityManagerInterface $doctrine): Response
    {
        $id = $doctrine->getRepository(User::class)->find($this->getUser());
        $publication = new Publication();
        //$publication->setChampPhoto('');
        $publication->setUser($id);
        $publication->setIdUserOriginal($id->getId());
        $publication->setUserOriginal($id->getPseudo());
        $publication->setDate(new \DateTime());
        $publication->setPartage(0);
        $form = $this->createForm(PublicationForm::class, $publication);
        $form->handleRequest($request);

        $slugger = new AsciiSlugger();

        if($form->get('champPhoto')->getData() == null && $form->get('commentaire')->getData() == null){
            return $this->render('publication/publication.html.twig', [
                'id' => $id,
                'publication' => $publication,
                'form' => $form->createView(),
            ]);
        }

        if ($form->isSubmitted() && $form->isValid())
        {
            $publication->setPubliSuivie(0);
            $publication->setNbLike(0);
            $publication->setNbDislike(0);
            if($form->get('champPhoto')->getData() != null){
                $image = $publication->getChampPhoto();
                $fileName = $this->generateUniqueFileName().'.'.$image->guessExtension();
                $image->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
                $publication->setChampPhoto($fileName);
            }

            $publication = $form->getData();
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($publication);
            $entityManager->flush();

            return $this->redirectToRoute('User.accueil');
        }
        $form->getErrors();
        return $this->render('publication/publication.html.twig', [
            'id' => $id,
            'publication' => $publication,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}/deletePubli", name="Publi.delete")
     */
    public function deletePubli(ManagerRegistry $doctrine, Request $request)
    {
        $idPubli = $doctrine->getRepository(Publication::class)->find((int)$request->attributes->get('id'));
        $signal = $doctrine->getRepository(Signal::class)->findOneBy(['publication' => $idPubli]);
        $userPubli = $doctrine->getRepository(Publication::class)->findOneBy(['user' => $idPubli->getUser()->getId()]);
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();
        $entityManager = $this->getDoctrine()->getManager();

        foreach($allPubli as $publiSite){
            if($publiSite->getIdUserOriginal() == $this->getUser()->getId() and ($publiSite->getPartage() == 1 or $publiSite->getPubliSuivie() == 1)){
                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->remove($publiSite);
                $entityManager->flush();
            }
        }
        if($signal != null)
            $entityManager->remove($signal);
        //$entityManager->remove($userPubli);
        $entityManager->remove($idPubli);
        $entityManager->flush();
        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/publicationSignalee/{id}/deletePubli", name="Publi.deleteFromSignal")
     */
    public function deletePubliFromSignal(ManagerRegistry $doctrine, Request $request)
    {
        $idPubli = $doctrine->getRepository(Publication::class)->find((int)$request->attributes->get('id'));
        $signal = $doctrine->getRepository(Signal::class)->findOneBy(['publication' => $idPubli]);
        $userPubli = $doctrine->getRepository(Publication::class)->findOneBy(['user' => $idPubli->getUser()->getId()]);
        $entityManager = $this->getDoctrine()->getManager();
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();

        foreach($allPubli as $publiSite){
            if($publiSite->getIdUserOriginal() == $this->getUser()->getId() and ($publiSite->getPartage() == 1 or $publiSite->getPubliSuivie() == 1)){
                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->remove($publiSite);
                $entityManager->flush();
            }
        }

        if($signal != null)
            $entityManager->remove($signal);
        $entityManager->remove($userPubli);
        $entityManager->remove($idPubli);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/{id}/partager", name="Publi.partager")
     */
    public function partagerPubli(ManagerRegistry $doctrine, Request $request)
    {
        $idPubli = $doctrine->getRepository(Publication::class)->find((int)$request->attributes->get('id'));

        $publication = new Publication();
        $publication->setDate(new \DateTime());
        $publication->setUser($this->getUser());
        $publication->setChampPhoto($idPubli->getChampPhoto());
        $publication->setCommentaire($idPubli->getCommentaire());
        $publication->setUserQuiCommente($idPubli->getUserQuiCommente());
        $publication->setReponses($idPubli->getReponses());
        $publication->setPartage(1);
        $publication->setNbLike($idPubli->getNbLike());
        $publication->setNbDislike($idPubli->getNbDislike());
        $publication->setUserOriginal($idPubli->getUser()->getPseudo());
        $publication->setIdUserOriginal($idPubli->getUser()->getId());
        $publication->setPubliSuivie(0);
        $publication->setSpotify($idPubli->getSpotify());
        $publication->setDeezer($idPubli->getDeezer());
        $publication->setListeUserQuiLike($idPubli->getListeUserQuiLike());
        $publication->setListeUserQuiDislike($idPubli->getListeUserQuiDislike());

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/users/{id}/partager", name="Publi.partagerFromSearch")
     */
    public function partagerPubliFromSearch(ManagerRegistry $doctrine, Request $request, $id)
    {
        $idPubli = $doctrine->getRepository(Publication::class)->findOneBy(["id" => [$id]]);

        $publication = new Publication();
        $publication->setDate(new \DateTime());
        $publication->setUser($this->getUser());
        $publication->setChampPhoto($idPubli->getChampPhoto());
        $publication->setCommentaire($idPubli->getCommentaire());
        $publication->setUserQuiCommente($idPubli->getUserQuiCommente());
        $publication->setReponses($idPubli->getReponses());
        $publication->setPartage(1);
        $publication->setNbLike($idPubli->getNbLike());
        $publication->setNbDislike($idPubli->getNbDislike());
        $publication->setUserOriginal($idPubli->getUser()->getPseudo());
        $publication->setIdUserOriginal($idPubli->getUser()->getId());
        $publication->setPubliSuivie(0);
        $publication->setSpotify($idPubli->getSpotify());
        $publication->setDeezer($idPubli->getDeezer());
        $publication->setListeUserQuiLike($idPubli->getListeUserQuiLike());
        $publication->setListeUserQuiDislike($idPubli->getListeUserQuiDislike());

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/publication/{id}", name="Publication.showOne", methods={"GET"})
     */
    public function showUnePubli(UserRepository $userRepository, EntityManagerInterface $doctrine, $id): Response
    {
        $publication = $doctrine->getRepository(Publication::class)->findOneBy(['id' => [$id]]);
        $user = $doctrine->getRepository(User::class)->findOneBy(['id' => $publication->getUser()]);
        $commentaires = $doctrine->getRepository(CommentPublication::class)->findOneBy(['id' => $publication]);
        return $this->render('publication/showOnePubli.html.twig', [
            'user' => $user,
            'publication' => $publication,
            'commentaires' => $commentaires
        ]);
    }

    /**
     * @Route("/publication/users/{id}", name="Publi.showProfilFromPubli")
     */
    public function showUserDePubli(ManagerRegistry $doctrine, $id)
    {
        $user = $doctrine->getRepository(User::class)->findOneBy(['id' => [$id]]);
        $publication = $doctrine->getRepository(Publication::class)->findBy(['user' => $user]);
        return $this->render('search/showProfilSearch.html.twig', [
            'user' => $user,
            'publication' => $publication
        ]);
    }

    /**
     * @Route("/{id}/liker", name="Publi.Liker")
     */
    public function likePubli(ManagerRegistry $doctrine, $id)
    {
        $publication = $doctrine->getRepository(Publication::class)->findOneBy(['id' => [$id]]);
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();

        $arrayUserQuiLike = $publication->getListeUserQuiLike();
        $arrayUserQuiDislike = $publication->getListeUserQuiDislike();



        foreach($allPubli as $pub){
            if ($pub->getIdUserOriginal() == $publication->getIdUserOriginal()){
                $arrayUserQuiLike2 = $pub->getListeUserQuiLike();
                $arrayUserQuiDislike2 = $pub->getListeUserQuiDislike();
                if(in_array($this->getUser()->getId(), $arrayUserQuiLike2) == false) {
                    $pub->setNbLike($pub->getNbLike() + 1);
                    array_push($arrayUserQuiLike2, $this->getUser()->getId());
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }
                else{
                    $pub->setNbLike($pub->getNbLike() - 1);
                    array_splice($arrayUserQuiLike2, array_search($this->getUser()->getId(), $arrayUserQuiLike2), 1);
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }

                if(in_array($this->getUser()->getId(), $arrayUserQuiDislike2) == true){
                    $pub->setNbDislike($pub->getNbDislike() - 1);
                    array_splice($arrayUserQuiDislike2, array_search($this->getUser()->getId(), $arrayUserQuiDislike2), 1);
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }
            }
        }

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/users/{id}/liker", name="Publi.LikerFromSearch")
     */
    public function likePubliFromSeach(ManagerRegistry $doctrine, $id)
    {
        $publication = $doctrine->getRepository(Publication::class)->findOneBy(['id' => [$id]]);
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();

        $arrayUserQuiLike = $publication->getListeUserQuiLike();
        $arrayUserQuiDislike = $publication->getListeUserQuiDislike();

        foreach($allPubli as $pub){
            if ($pub->getIdUserOriginal() == $publication->getIdUserOriginal()){
                $arrayUserQuiLike2 = $pub->getListeUserQuiLike();
                $arrayUserQuiDislike2 = $pub->getListeUserQuiDislike();
                if(in_array($this->getUser()->getId(), $arrayUserQuiLike2) == false) {
                    $pub->setNbLike($pub->getNbLike() + 1);
                    array_push($arrayUserQuiLike2, $this->getUser()->getId());
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }
                else{
                    $pub->setNbLike($pub->getNbLike() - 1);
                    array_splice($arrayUserQuiLike2, array_search($this->getUser()->getId(), $arrayUserQuiLike2), 1);
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }

                if(in_array($this->getUser()->getId(), $arrayUserQuiDislike2) == true){
                    $pub->setNbDislike($pub->getNbDislike() - 1);
                    array_splice($arrayUserQuiDislike2, array_search($this->getUser()->getId(), $arrayUserQuiDislike2), 1);
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }
            }
        }

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/{id}/disliker", name="Publi.Disliker")
     */
    public function dislikePubli(ManagerRegistry $doctrine, $id)
    {
        $publication = $doctrine->getRepository(Publication::class)->findOneBy(['id' => [$id]]);
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();

        $arrayUserQuiLike = $publication->getListeUserQuiLike();
        $arrayUserQuiDislike = $publication->getListeUserQuiDislike();

        foreach($allPubli as $pub){
            if ($pub->getIdUserOriginal() == $publication->getUser()->getId()){
                $arrayUserQuiLike2 = $pub->getListeUserQuiLike();
                $arrayUserQuiDislike2 = $pub->getListeUserQuiDislike();
                if(in_array($this->getUser()->getId(), $arrayUserQuiDislike2) == false) {
                    $pub->setNbDislike($pub->getNbDislike() + 1);
                    array_push($arrayUserQuiDislike2, $this->getUser()->getId());
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }
                else{
                    $pub->setNbDislike($pub->getNbDislike() - 1);
                    array_splice($arrayUserQuiDislike2, array_search($this->getUser()->getId(), $arrayUserQuiDislike2), 1);
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }

                if(in_array($this->getUser()->getId(), $arrayUserQuiLike2) == true){
                    $pub->setNbLike($pub->getNbLike() - 1);
                    array_splice($arrayUserQuiLike2, array_search($this->getUser()->getId(), $arrayUserQuiLike2), 1);
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }
            }
        }

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }

    /**
     * @Route("/users/{id}/disliker", name="Publi.DislikerFromSearch")
     */
    public function dislikePubliFromSearch(ManagerRegistry $doctrine, $id)
    {
        $publication = $doctrine->getRepository(Publication::class)->findOneBy(['id' => [$id]]);
        $allPubli = $doctrine->getRepository(Publication::class)->findAll();

        $arrayUserQuiLike = $publication->getListeUserQuiLike();
        $arrayUserQuiDislike = $publication->getListeUserQuiDislike();

        foreach($allPubli as $pub){
            if ($pub->getIdUserOriginal() == $publication->getUser()->getId()){
                $arrayUserQuiLike2 = $pub->getListeUserQuiLike();
                $arrayUserQuiDislike2 = $pub->getListeUserQuiDislike();
                if(in_array($this->getUser()->getId(), $arrayUserQuiDislike2) == false) {
                    $pub->setNbDislike($pub->getNbDislike() + 1);
                    array_push($arrayUserQuiDislike2, $this->getUser()->getId());
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }
                else{
                    $pub->setNbDislike($pub->getNbDislike() - 1);
                    array_splice($arrayUserQuiDislike2, array_search($this->getUser()->getId(), $arrayUserQuiDislike2), 1);
                    $pub->setListeUserQuiDislike($arrayUserQuiDislike2);
                }

                if(in_array($this->getUser()->getId(), $arrayUserQuiLike2) == true){
                    $pub->setNbLike($pub->getNbLike() - 1);
                    array_splice($arrayUserQuiLike2, array_search($this->getUser()->getId(), $arrayUserQuiLike2), 1);
                    $pub->setListeUserQuiLike($arrayUserQuiLike2);
                }
            }
        }

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->persist($publication);
        $entityManager->flush();

        return $this->redirectToRoute('User.accueil');
    }
}